name: Welcome to Rassmalog

date: Wed Dec 13 01:28:17 PST 2006 @436 /Internet Time/

tags:
  - rassmalog

text: |
  Rassmalog is a static blog engine based on "RSS 2.0":http://en.wikipedia.org/wiki/RSS, "YAML":http://www.yaml.org/, and "Textile":http://whytheluckystiff.net/ruby/redcloth/. It is "Free Software":http://www.gnu.org/copyleft/gpl.html inspired by the "Rog":http://rog.rubyforge.org and "hobix":http://hobix.com blog engines.

  It is _static_ because it lives on your computer and generates HTML pages -- which can be uploaded to _any_ web server via FTP, SSH, SFTP, and so on. In contrast, a _dynamic_ blog engine would live on a web server and generate HTML pages when you visit them in your web browser.

  The name _Rassmalog_ is derived from the word "Rasmalai":http://en.wikipedia.org/wiki/Rasmalai and is also a portmanteau of the words RSS, YAML, and blog.


  h2. Motivation

  bq=. <big>Your blog. Your content!</big>

  With Rassmalog, you have full control of your blog and your content. Your entries, images, stylesheets, and so on, are all stored on _your_ computer.

  * You can easily make backups and share them with a good friend.

  * You're safe from the web server accidentally crashing or losing all of your data.

  * If you decide to use another blog engine, your blog entries are readily transformed into the other blog's format because they are plain-text.

  * You won't be rummaging through towering piles of "blog spam":http://en.wikipedia.org/wiki/Blog_spam via a clunky web interface because Rassmalog provides an _e-mail based_ commenting mechanism (which can be disabled if you want).

    This may sound inconvenient, and perhaps old-fashioned at first, but sending e-mail is _extremely_ simple -- as "demonstrated daily":http://en.wikipedia.org/wiki/E-mail_spam by spammers across the world. @;-)@ But fear not, because your e-mail address will be obfuscated in such a way that "address harvesters":http://en.wikipedia.org/wiki/E-mail_address_harvesting won't bother trying to figure it out.

  With a dynamic blog engine, your content is stored in some obscure binary format within a database on a web server.

  * If you want to make a backup, you might not even have access (depends on your blog host) to download the raw content from the database.

  * If you decide to use another blog engine and if your blog host lets you download your content, then you can transform your content into the other blog's format.

    However, you are now tasked with importing your content into the other blog. If you're lucky, the new blog will have some kind of import feature. Otherwise, you're sentenced to manual labor: copying and pasting your content into the new blog engine. @:-(@

  * You will be rummaging through towering piles of "blog spam":http://en.wikipedia.org/wiki/Blog_spam eventually.


  h2. Features

  Rassmalog features an extensible "blog formatting mechanism":#config.format, easy configuration, and automatic tagging, archiving, syntax coloring, and table of contents.

  It is designed to be _easy to use_ and _easy to configure_. These goals are acheived partly through simplicity: Rassmalog's tiny code base contains only _six_ source files and _five_ of them are devoted to configuration. As a result,

  * Nearly everything is automated:
  ** Automatic _table of contents_ for blog entries.
  ** Automatic _syntax coloring_ and smart sizing (line vs. paragraph) for source code.
  ** Automatic tag and month _archives_.
  ** Automatic "RSS 2.0 feed":http://en.wikipedia.org/wiki/RSS for your entire blog.

  * Blog entries are plain-text files with easy syntax (see this "sample entry":http://rassmalog.rubyforge.org/src/rassmalog/entries/example.yaml and "its output":2006-12-08-put-the-name-of-your-entry-here..html)
  ** Only _four_ parameters in a blog entry: *name*, *date*, *tags*, and *text*.
  *** You can define your own parameters in a blog entry and use them in the templates _without_ additional programming (thanks to Ruby's @OpenStruct@ class).
  ** _No_ obscure rules for naming blog entry files. The file name can be whatever you want!
  ** _No_ obscure restrictions on how blog entry files are organized -- just keep them _somewhere_ beneath the <tt>entries/</tt> directory.

  * Templates are easily changable to suit your tastes:
  ** Only _two_ templates involved in generating HTML output.
  ** Only _one_ template involved in generating an RSS feed.

  * If you don't like Textile, you can easily "use _any_ text formatting system":#config you want for blog entries.

  * Easy L10N(Localization) / I18N(Internationalization) / M17N(Multilingualization) of the central application. (See this "sample file":http://rassmalog.rubyforge.org/src/rassmalog/config/lang/te-in.yaml and "part of its effect":http://www.soe.ucsc.edu/~snk/ on the author's blog -- the rest of the translation took place in the templates).


  h2(#organization). Organization

  When you download and extract the release package, you would see the following:

  * <tt>config/</tt>
    - directory that contains all configuration files

  * <tt>config/blog.yaml</tt>
    - the primary configuration file for your blog

  * <tt>config/html.erb</tt>
    - template used to generate all HTML files

  * <tt>config/rss.erb</tt>
    - template used to generate the RSS 2.0 feed

  * <tt>config/entry.erb</tt>
    - template used to generate HTML for an entry

  * <tt>config/format.rb</tt>
    - defines how text is transformed into HTML

  * <tt>config/lang/</tt>
    - directory that contains translations of English text used in the core of Rassmalog. These translations do not include English text used in the templates (<tt>config/*.erb</tt>) because those are already separate from the core of Rassmalog.

  * <tt>config/lang/te-in.yaml</tt>
    - translation file for the Telugu (India) language.

    You can enable this translation file by setting the value of the @language@ parameter in the <tt>config/blog.yaml</tt> file to "te-in", as follows:

      language: te-in

    In this manner, you can create translation files for your own languages and enable them in your blog. However, please consider "contributing your translation files":http://rubyforge.org/tracker/?group_id=2737 so that other users can enjoy your translations! :-)

  * <tt>entries/</tt>
    - directory that contains all blog entry files.

    The file name of a blog entry file can be _anything_ as long it ends with a <tt>.yaml</tt> extension. All other files beneath the <tt>entries/</tt> directory are ignored.

    You can organize your blog entry files within subdirectories. For example, I like to put all blog entry files related to Ruby programming within the <tt>entries/code/ruby/</tt> subdirectory. The names of these subdirectories do not have any special meaning to Rassmalog, so you can name them however you like.

  * <tt>entries/example.yaml</tt>
    - an example blog entry file.

  * <tt>input/</tt>
    - directory that contains resources, such as images and stylesheets, that are used by your blog. Everything inside this directory is automatically copied into the <tt>output/</tt> directory when your blog is generated.

  * <tt>input/styles/default.css</tt>
    - the default CSS stylesheet provided with Rassmalog.

  * <tt>output/</tt>
    - directory that contains all generated files.


  h3. Version numbering system

  I _strictly_ follow the RubyGems project's "rational versioning policy":http://www.rubygems.org/read/chapter/7. To summarize[1] this "major.minor.build" numbering policy,
  * an increase in the _major_ number indicates that _functionally incompatible_ changes have occurred. Thus, what may have worked in the previous version may not work in the new one.
  * an increase in the _minor_ number indicates that _functionally compatible_ changes have occurred. Thus, what worked in the previous version will work in the new one.
  * an increase in the _build_ number indicates that the _underlying implementation_ has changed. The functionality has not changed and no features have been added. Thus, what worked in the previous version will work in the new one.

  fn1. C. Gross, "Explaining Open Source Version Numbers", [Online document], 2005 Nov 28, [cited 2006 Aug 27], Available HTTP: "http://ablog.apress.com/?p=738":http://ablog.apress.com/?p=738


  h2. Requirements

  The following software is required:

  * "Rake":http://docs.rubyrake.org/
  * "RedCloth":http://whytheluckystiff.net/ruby/redcloth/
  * "CodeRay":http://coderay.rubychan.de/

  If you have "RubyGems":http://rubygems.org/ on your system, then you can install the above requirements by running the following command:

    gem install rake redcloth coderay


  h3. Bypassing some requirements

  If you do not wish to install RedCloth and CodeRay, please see the section named "using another formatting system":#config.format below.


  h2. Installation

  Simply extract the release package anywhere you want.


  h2. Usage

  In the location where you extracted the release package, run the following command to see a list of available tasks:

    rake -T

  To generate your blog, run either of the following commands:

    rake

    rake blog

  To _forcefully_ regenerate your blog, run the following command:

    rake clobber blog

  To upload your blog to your website, run the following command:

    rake upload


  h2(#config). Configuration

  Start by editing the <tt>config/blog.yaml</tt> file. It has plentiful comments/documentation to help you configure your blog.

  Next, proceed to editing the other files in the <tt>config/</tt> directory to suit your taste. These files are described above in the "Organization":#organization section.


  h3(#config.format). Using another text formatting system

  To use another text formatting system, simply replace the @String.to_html@ method, which is defined in the <tt>config/format.rb</tt> file, to make use of your desired text formatting scheme.

  For example, if you replace the entire <tt>config/format.rb</tt> file with the following code, then all entries will appear within yellow-colored &lt;pre&gt; elements in the generated HTML files.

  <code>
  class String
    def to_html
      '<pre style="background-color: yellow">' + self + '</pre>'
    end
  end
  </code>

  In this manner, you can extend Rassmalog to use any formatting system you wish.


  h2. Hacking

  You can obtain the latest source code from the Darcs repository:

    darcs get http://rassmalog.rubyforge.org/src/rassmalog/
