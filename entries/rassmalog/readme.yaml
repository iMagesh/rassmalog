name: Welcome to Rassmalog

date: Wed Dec 13 01:28:17 PST 2006 @436 /Internet Time/

tags:
  - rassmalog

text: |
  Rassmalog is a static blog engine based on "RSS 2.0":http://en.wikipedia.org/wiki/RSS, "YAML":http://www.yaml.org/, and "Textile":http://whytheluckystiff.net/ruby/redcloth/. It is "Free Software":http://www.gnu.org/copyleft/gpl.html inspired by the "Rog":http://rog.rubyforge.org and "hobix":http://hobix.com blog engines.

  It is *static* because it lives on your computer and generates HTML pages. These pages are then uploaded to _any_ web server via FTP, SSH, SFTP, and so on.

  In contrast, a *dynamic* blog engine lives on a web server and generates HTML pages, on demand, when you visit them in your web browser.

  The name "Rassmalog" is derived from the word "Rasmalai":http://en.wikipedia.org/wiki/Rasmalai and is also a portmanteau of the words RSS, YAML, and blog.


  h1. Motivation

  p=. <big>Your blog. Your content!</big>

  With Rassmalog, you have _complete_ control over your blog and your content. Your entries, images, stylesheets, and so on, are all stored on _your_ computer.

  * You can easily make backups and share them with a good friend.

  * You are safe if your web server accidentally crashes or loses all of your data.

  * If you decide to use another blog engine, your blog entries are readily transformed into the other blog's format because they are plain-text.

  * You won't be rummaging through towering piles of "blog spam":http://en.wikipedia.org/wiki/Blog_spam via a clunky web interface because Rassmalog provides an _e-mail based_ commenting mechanism (which can be disabled if you want).

    This may sound inconvenient, and perhaps old-fashioned at first, but sending e-mail is _extremely_ simple -- as "demonstrated daily":http://en.wikipedia.org/wiki/E-mail_spam by spammers across the world. @;-)@ But fear not, because your e-mail address will be obfuscated in such a way that "address harvesters":http://en.wikipedia.org/wiki/E-mail_address_harvesting won't bother trying to figure it out.

  In contrast, with a dynamic blog engine, your content is stored in some obscure binary format within a database on a web server.

  * If you want to make a backup, you might not even have access (depends on your blog host) to download the raw content from the database.

  * If you decide to use another blog engine and if your blog host lets you download your content, then you can transform your content into the other blog's format.

    However, you are now tasked with importing your content into the other blog. If you're lucky, the new blog will have some kind of import feature. Otherwise, you're sentenced to manual labor: copying and pasting your content into the new blog engine. @:-(@

  * You will be rummaging through towering piles of "blog spam":http://en.wikipedia.org/wiki/Blog_spam eventually.


  h1. Features

  Rassmalog is designed for ease of use and configuration. These goals are achieved through simplicity: Rassmalog's code base is tiny, containing less than 500 lines of code! As a result,

  * Nearly everything is automated:
  ** Automatic table of contents for blog entries.
  ** Automatic syntax coloring and smart sizing (line vs. paragraph) for source code.
  ** Automatic tag and month archives.
  ** Automatic "RSS 2.0 feed":http://en.wikipedia.org/wiki/RSS for your entire blog.

  * Blog entries are plain-text files with easy syntax. (See this "sample entry":http://rassmalog.rubyforge.org/src/rassmalog/entries/rassmalog/example.yaml and "its output":2006-12-08-put-the-name-of-your-entry-here..html.)
  ** Only four parameters in a blog entry: *name*, *date*, *tags*, and *text*.
  *** You can define your own parameters in a blog entry and use them in the templates _without_ additional programming (thanks to Ruby's @OpenStruct@ class).
  ** _No_ obscure rules for naming blog entry files. The file name can be whatever you want!
  ** _No_ obscure restrictions on how blog entry files are organized -- just keep them _somewhere_ beneath the <tt>entries/</tt> directory.
  ** You can use ERB directives within the *text* of your blog entries.

  * Templates are easily changable to suit your tastes:
  ** Only five templates involved in generating HTML output.
  ** Only one template involved in generating an RSS feed.

  * If you don't like Textile, you can easily "use _any_ text formatting system":#config you want for blog entries.

  * "Easy L10N(Localization) / I18N(Internationalization) / M17N(Multilingualization)":#config.lang of the central application.


  h1. Organization

  The basic unit of content in Rassmalog is the *entry*. Entries are collected into *pages*. Pages are collected into *chapters*.

  As you can see, there is a hierarchical relationship here:

  * Chapter
  ** Page
  *** Entry

  For example, a chapter shows a list of all available tags, a page shows a list of entries which have a particular tag, and an entry just shows its content.


  h2(#manifest). Package manifest

  When you extract the release package, you would see the following:

  * <tt>rassmalog.rb</tt>
    - the core of Rassmalog

  * <tt>config/</tt>
    - directory that contains all configuration files

  * <tt>config/blog.yaml</tt>
    - the primary configuration file for your blog

  * <tt>config/rss.erb</tt>
    - template used to generate the RSS 2.0 feed

  * <tt>config/html.erb</tt>
    - template used to generate all HTML files

  * <tt>config/index.erb</tt>
    - template used to generate all <tt>index*.html</tt> files

  * <tt>config/entry.erb</tt>
    - template used to generate HTML for an entry

  * <tt>config/page.erb</tt>
    - template used to generate HTML for a page

  * <tt>config/chapter.erb</tt>
    - template used to generate HTML for a chapter

  * <tt>config/format.rb</tt>
    - defines how text is transformed into HTML

  * <tt>config/lang/</tt>
    - directory that contains translations of English text used in the core of Rassmalog. These translations do not include English text used in the templates (<tt>config/*.erb</tt>) because those are already separate from the core of Rassmalog.

    Learn "how to use these translation files":#config.lang below.
  <% # list all the translation files
    Dir['config/lang/*.yaml'].each do |file|
      lang = File.readlines(file).first.sub(/^#/, '')
  %>
  ** <tt><%= file %></tt> - <%= lang %> translation file.
  <% end %>

  * <tt>entries/</tt>
    - directory that contains all blog entry files.

    The file name of a blog entry file can be _anything_ as long it ends with a <tt>.yaml</tt> extension. All other files beneath the <tt>entries/</tt> directory are ignored.

    You can organize your blog entry files within subdirectories. For example, I like to put all blog entry files related to Ruby programming within the <tt>entries/code/ruby/</tt> subdirectory. The names of these subdirectories do not have any special meaning to Rassmalog, so you can name them however you like.

  * <tt>entries/example.yaml</tt>
    - an example blog entry file.

  * <tt>input/</tt>
    - directory that contains resources, such as images and stylesheets, that are used by your blog. Everything inside this directory is automatically copied into the <tt>output/</tt> directory when your blog is generated.

  * <tt>input/styles/default.css</tt>
    - the default CSS stylesheet provided with Rassmalog.

  * <tt>output/</tt>
    - directory that contains all generated files.


  h2. Version numbering system

  I strictly follow the RubyGems project's "rational versioning policy":http://www.rubygems.org/read/chapter/7. This @major.minor.build@ numbering policy "can be summarized":http://ablog.apress.com/?p=738 as follows:

  * an increase in the *major* number indicates that _functionally incompatible_ changes have occurred. Thus, what may have worked in the previous version may not work in the new one.

  * an increase in the *minor* number indicates that _functionally compatible_ changes have occurred. Thus, what worked in the previous version will work in the new one.

  * an increase in the *build* number indicates that the _underlying implementation_ has changed. The functionality has not changed and no features have been added. Thus, what worked in the previous version will work in the new one.



  h1. Requirements

  The following software is required:

  * "Rake":http://docs.rubyrake.org/
  * "RedCloth":http://whytheluckystiff.net/ruby/redcloth/
  * "CodeRay":http://coderay.rubychan.de/

  If you have "RubyGems":http://rubygems.org/ on your system, then you can install the above requirements by running the following command:

    gem install rake redcloth coderay


  h2. Bypassing some requirements

  If you do not wish to install RedCloth and CodeRay, please see the section named "using another formatting system":#config.format below.


  h1. Installation

  Simply extract the release package anywhere you want.


  h1. Usage

  The following subsections discuss how Rassmalog is used.


  h2. Tasks

  In the location where you extracted the release package, run the following command to see a list of available tasks:

    rake -T

  For example, here is the output you would see when you run the above command:

    <pre><%= `rake -T` %></pre>


  h3. Generating your blog

  To generate your blog, run the following command:

    rake

  To regenerate your blog from _scratch_, run the following command:

    rake regen


  h3. Removing generated files

  To remove only the files that were copied from <tt>input/</tt> to <tt>output/</tt>, run the following command:

    rake clean

  To remove all the generated files, run the following command:

    rake clobber


  h3. Publishing your blog

  To upload your blog to your website, run the following command:

    rake upload


  h3. Checking your work

  To continuously preview a blog entry as you write it, run the command <pre>rake entry</pre> within an infinite loop in your shell, like this:

    while true; do rake entry; sleep 1; done

  Now, whenever you save your blog entry file, its HTML page will be generated for preview in your web browser.


  h2(#config). Configuration

  Start by editing the <tt>config/blog.yaml</tt> file. It has plentiful comments and documentation to help guide you through you the configuration process. Next, proceed to editing the other files in the <tt>config/</tt> directory to suit your taste. These files are described above in the "Manifest":#manifest section.

  You are encouraged to generate your blog at each step of the configuration process to see how your choices affect the generated output. This gives you a good sense of how Rassmalog works and how your blog can be shaped to suit your specific needs.


  h3(#config.lang). Using translation files

  The <tt>config/lang/</tt> directory contains translation files for English text used in the core of Rassmalog. To enable one of these files, set the value of the @language@ parameter in the <tt>config/blog.yaml</tt> file to the name of the translation file.

  For example, if you wish to enable the <tt>config/lang/foobar.yaml</tt> translation file, then you would set the @language@ parameter as follows:

      language: foobar

  In this manner, you can add or edit translation files for your own languages and use them in your blog. However, please consider "contributing your translation files":http://rubyforge.org/tracker/?group_id=2737 so that other users can also enjoy your translations! @:-)@


  h3(#config.format). Using another text formatting system

  To use another text formatting system, simply replace the @String.to_html@ method, which is defined in the <tt>config/format.rb</tt> file, to make use of your desired text formatting scheme.

  For example, if you replace the entire <tt>config/format.rb</tt> file with the following code, then all entries will appear within yellow-colored &lt;pre&gt; elements in the generated HTML files.

  <code>
  class String
    def to_html
      '<pre style="background: yellow">' + self + '</pre>'
    end
  end
  </code>

  In this manner, you can extend Rassmalog to use any formatting system you wish.


  h1. Hacking

  You can obtain the latest source code from the Darcs repository:

    darcs get http://rassmalog.rubyforge.org/src/rassmalog/
