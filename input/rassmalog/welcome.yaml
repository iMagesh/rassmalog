name: Welcome to Rassmalog

tags: reference

text: |
  <%
    langFiles = Dir['config/lang/*.yaml'].sort

    def dump_param_info aInputFile, aHeadingDepth
      File.read(aInputFile).scan(/(?:\n#.*)+(?:\n\w+:)?/).map do |s|
        info, param = s.split /\n(?!#)/
        info.gsub! /^# ?/, ''
        info.strip!

        out = "\n\n\n"

        if param
          param.sub! /:$/, ''
          emblems, info = info.split(/$/, 2)

          unless emblems =~ /\(.*?\)/
            info.insert(0, emblems)
            emblems = ''
          end

          out << "h#{aHeadingDepth}(#param.#{param}). #{param} #{emblems}\n\n\n"
        elsif info =~ /^#+$/
          next
        end

        out << info
      end.join
    end
  %>


  h1. Introduction

  Rassmalog is a static blog engine based on "YAML":http://www.yaml.org/, "eRuby":http://en.wikipedia.org/wiki/Eruby, and "Rake":http://rake.rubyforge.org/. It transforms blog entries written in "Textile":http://whytheluckystiff.net/ruby/redcloth/ or "other formatting systems":#config.format into valid XHTML files that you can view on your computer or upload to your website.

  Rassmalog is "open source software":#License inspired by the "Rog":http://rog.rubyforge.org and "hobix":http://hobix.com blog engines and by the "nanoc":http://nanoc.stoneship.org CMS(Content Management System). Its name is derived from the word "Rasmalai":http://dailygirlblog.blogspot.com/2006/09/rasmalai.html and is a pseudo portmanteau of the words "RSS", "YAML", and "blog".


  h2. Features

  Noteworthy features:
  * composed of _less than_ 600 lines of code!
  * supports "any text formatting system":#config.format imaginable!
  * automatic "table of contents":#entry.toc for blog entries
  * automatic "syntax coloring":#entry.code for source code
  * user-friendly output for "text-only web browsers":http://en.wikipedia.org/wiki/W3m
  * "foreign language support":#lang for "<%= langFiles.length %> languages":#manifest.lang

  Standard features:
  * categorization by tagging or labels ("folksonomy":http://en.wikipedia.org/wiki/Folksonomy)
  * automatic archives by date, month, year, etc.
  * automatic "RSS feed":http://en.wikipedia.org/wiki/RSS for your entire blog
  * automated "blog import":#usage.import from any RSS feed


  h2. Motivation

  Although "dynamic blog engines":http://en.wikipedia.org/wiki/Dynamic_web_page are popular nowadays, "static blog engines":http://en.wikipedia.org/wiki/Static_Web_page like Rassmalog are still relevant. The following sections attempt to explain why.


  h3. Server requirements

  |_. Dynamic blog engine|_. Rassmalog|
  |*Requires a web server* that supports CGI(Common Gateway Interface) or a server-side scripting language.<br/><br/> Another typical requirement is *access to a relational database*.|*Requires nothing* because _all_ web servers are, by definition, capable of serving files over HTTP(Hypertext Transfer Protocol).<br/><br/> In fact, even a *web server is not necessary* if you just want to view your blog locally, on your own computer.|


  h3. Content ownership

  |_. Dynamic blog engine|_. Rassmalog|
  |Your *content is locked away* within a relational database, to which you might not have access. Thus, it is *difficult to backup* your content.|Your *content is stored locally*, on _your_ computer. Thus, it is *easy to backup* and share with a good friend.|
  |You are *vulnerable to data loss* when your web hosting service accidentally crashes or erases your blog.|You are *safe from data loss* when your web hosting service accidentally crashes or erases your blog.|


  h3. Content portability

  |{visibility: hidden;}. &nbsp;|_. Dynamic blog engine|_. Rassmalog|
  |_. How is your content kept?|Scattered across a _relational_ database on the web server.|In *plain text* files on _your_ computer.|
  |_. How do you migrate to another blog engine?|Assuming that you have SQL access to your blog's relational database, you must first *understand the database schema* before you can extract your content.<br/><br/> Afterwards, you still need to convert the extracted content into the new blog's format.|Your *content is readily converted* into the new blog's format using standard "text processing tools":http://tldp.org/LDP/abs/html/textproc.html or languages such as "Perl":http://perl.org and "Ruby":http://ruby-lang.org.|


  h3. Spam control

  |_. Dynamic blog engine|_. Rassmalog|
  |Provides *web based comments* that typically burden users with "CAPTCHA tests":http://www.captcha.net and/or become vulnerable to "comment spam":http://en.wikipedia.org/wiki/Spam_in_blogs.<br/><br/> You will have to clean up the spam eventually, using a clunky web-based comment management interface.|Provides *e-mail based comments* which can be disabled if you want. Note that "dynamic JavaScript-based comments":rassmalog/tricks/dynamic-comments.html are also available. <br/><br/> Special care is taken to avoid "e-mail spam":http://en.wikipedia.org/wiki/E-mail_spam by *obfuscating your e-mail address* in such a way that "address harvesters":http://en.wikipedia.org/wiki/E-mail_address_harvesting won't bother trying to figure it out.|


  h2. Version numbering system

  Rassmalog uses the "RubyGems rational versioning policy":http://www.rubygems.org/read/chapter/7 to number its releases. This *major.minor.patch* numbering policy "is summarized":http://ablog.apress.com/?p=738 as follows.

  * When the *major* number increases, functionally *incompatible changes* have occurred. Thus, what may have worked in the previous version may not work in the new one.

  * When the *minor* number increases, functionally *compatible changes* have occurred. Thus, what worked in the previous version will work in the new one.

  * When the *patch* number increases, the *underlying implementation* has changed. The functionality has not changed and no features have been added. Thus, what worked in the previous version will work in the new one.


  h2. License

  <%=h File.read('LICENSE') %>

  <%##########################################################################%>

  h1. Installation

  Simply extract the release package anywhere you want.


  h2. Requirements

  To use Rassmalog, you need the following software (however, you can "bypass some of them":#Bypassing_some_requirements):

  * "Rake":http://docs.rubyrake.org/
  * "RedCloth":http://whytheluckystiff.net/ruby/redcloth/
  * "CodeRay":http://coderay.rubychan.de/

  If you have "RubyGems":http://rubygems.org/ on your system, then you can install the above requirements by running the following command:

    gem install rake redcloth coderay --include-dependencies


  h3. Bypassing some requirements

  If you do not wish to install RedCloth and CodeRay, please see the section named "using another formatting system":#config.format below.

  <%##########################################################################%>

  h1. Organization

  The basic unit of content in Rassmalog is the blog *entry*. Entries are collected into *sections*. Pages are collected into *chapters*.

  As you can see, there is a hierarchical relationship here:

  * Chapter
  ** Section
  *** Entry

  For example,
  * a *chapter* shows all available tags
  * a *section* shows all entries that have a particular tag
  * an *entry* just shows its content


  h2(#manifest). Directory structure

  * <tt>rassmalog.rb</tt>
    - the core of Rassmalog.

  h3(#manifest.config). config/

  * <tt>config/</tt>
    - directory that contains all configuration files.

  * <tt>config/blog.yaml</tt>
    - the primary configuration file for your blog.

  * <tt>config/rss.erb</tt>
    - template for generating the RSS feed for the blog.

  * <tt>config/html.erb</tt>
    - template for generating a complete HTML web page.

  * <tt>config/chapter.erb</tt>
    - template for generating HTML for lists of tags and archives.

  * <tt>config/section.erb</tt>
    - template for generating HTML for individual tags and archives.

  * <tt>config/list.erb</tt>
    - template for generating the recent/all lists of blog entries.

  * <tt>config/entry.erb</tt>
    - template for generating HTML for a blog entry.

  * <tt>config/format.rb</tt>
    - defines how text is transformed into HTML.

  * <tt>config/lang/</tt>
    - directory that contains translations of English text used in the core of Rassmalog. These translations do not include English text used in the templates (<tt>config/*.erb</tt>) because those are already separate from the core of Rassmalog.

    <a id="manifest.lang"></a>
  <% langFiles.each do |file| %>
  ** <tt><%= file %></tt> <%= File.readlines(file)[0].chomp.scan(/\(.*\)/)[0] %>
  <% end %>

  h3(#manifest.output). output/

  * <tt>output/</tt>
    - directory that contains your generated blog.

  h3(#manifest.input). input/

  * <tt>input/</tt>
    - directory that contains (1) source files for blog entries and (2) additional resources, such as images and stylesheets, that are used by your blog. Everything inside this directory, except source files for blog entries, is automatically copied into the <tt>output/</tt> directory (relative paths are preserved) when your blog is generated.

    A blog entry source file's name must end with a <tt>.yaml</tt> extension. By default, a source file's corresponding output file has (1) the same name and relative path as the source file but (2) ends with a <tt>.html</tt> extension.

    For example, the <tt>input/foo/bar/moz.yaml</tt> source file's corresponding output file is <tt>output/foo/bar/moz.html</tt>. You can override this default behavior by adding the "*output_file* parameter":#param.output_file to your blog entry.

  * <tt>input/styles/screen.css</tt>
    - the default CSS stylesheet provided with Rassmalog.

  * <tt>input/styles/print.css</tt>
    - the default CSS stylesheet provided with Rassmalog.

  * <tt>input/rassmalog/entry.yaml</tt>
    - reference of the blog entry file format.

  h3(#manifest.entries). entries/

  * <tt>entries/</tt>
    - directory that contains blog entry source files whose output files are *automatically calculated* by Rassmalog.

    A blog entry source file's name must end with a <tt>.yaml</tt> extension. By default, all source files in this directory will have a corresponding output file with a name in the form: "_date_-_name_.html".

    For example, the <tt>entries/foo/bar/moz.yaml</tt> source file, which was written on 19 July 2006 and has a name of "hello world", will have a corresponding output file at <tt>output/2006-07-19-hello-world.html</tt>. You can override this default behavior by adding the "*output_file* parameter":#param.output_file to your blog entry.

    As you can see, _unlike_ the blog entries in the <tt>input/</tt> directory, blog entries in the <tt>entries/</tt> directory do not have to worry about their original file name influencing the output file name. As a result, you can organize your blog entry files however you want.

    For example, I like to put all blog entry files related to Ruby programming within the <tt>entries/code/ruby/</tt> subdirectory. The names of these subdirectories do not have any special meaning to Rassmalog, so you can name them however you like.

  <%##########################################################################%>

  h1(#config). Configuration

  Start by editing the <tt>config/blog.yaml</tt> file. It has plentiful comments and documentation to help guide you through you the configuration process. Next, proceed to editing "the other files":#manifest in the <tt>config/</tt> directory to suit your taste.

  You are encouraged to "generate your blog":#usage.gen at each step of the configuration process to see how your choices affect the generated output. This gives you a good sense of how Rassmalog works and how your blog can be shaped to suit your specific needs.


  h2. Parameters

  The <tt>config/blog.yaml</tt> file says:

  <%= dump_param_info('config/blog.yaml', 3) %>


  h2(#lang). Localization for foreign languages

  The core of Rassmalog is easily localized (L10N(Localization) / I18N(Internationalization) / M17N(Multilingualization)) through "translation files":#config.lang, which consist of simple key-value pairs. For instance, the translation file for Spanish appears like this:

  <pre><%= File.read('config/lang/es.yaml') %></pre>

  Here, English phrases are written on the left and their corresponding Spanish phrases are written on the right.


  h3(#config.lang). Enabling a translation file

  The <tt>config/lang/</tt> directory contains translation files ("there are <%= langFiles.length %> of them":#manifest.lang, at present) for English text used in the core of Rassmalog. To enable one of these files, set the value of the *language* parameter in the <tt>config/blog.yaml</tt> file to the name of the translation file.

  For example, if you wish to enable the <tt>config/lang/foobar.yaml</tt> translation file, then you would set the *language* parameter as follows:

      language: foobar

  In this manner, you can add or edit translation files for your own languages and use them in your blog. However, please consider "contributing your translation files":http://rubyforge.org/tracker/?group_id=2737 so that other users can also enjoy your translations! :-)


  h2(#config.format). Using another text formatting system

  To use another text formatting system, simply replace the @String.to_html@ method, which is defined in the <tt>config/format.rb</tt> file, to make use of your desired text formatting scheme.

  For example, if you replace the entire <tt>config/format.rb</tt> file with the following code, then all entries will appear within red boxes in the output.

  <code>
  class String
    def to_html
      '<pre style="border: thin solid red">' + self + '</pre>'
    end
  end
  </code>

  In this manner, you can make Rassmalog use any formatting system you wish!


  h2. Disabling parts of a blog

  Suppose you wanted to disable the generation of the RSS feed for your blog. In order to do this,

  # Open the <tt>rassmalog.rb</tt> file for editing using a text editor.
  # Scroll down to the "output generation stage" section.
  # You should now see a line of code similar to this:
    <br/>
    @task :default => [:copy, :entry, :page, :chapter, :index, :feed]@
  # Remove the @:feed@ element from the line of code.

  In this manner, you can disable other parts of the blog generation process. Furthermore, you can edit the source code in the "output generation stage" section to suit your needs.

  <%##########################################################################%>

  h1. Usage

  In the location where you installed Rassmalog, run the following command to see a list of available tasks:

    rake -T

  For example, here is the output you would see when you run the above command:

    <pre><%= `rake -T || rake.bat -T || echo Your system lacks the rake command.` %></pre>


  h2(#usage.gen). Generating your blog

  To generate your blog, run the following command:

    rake

  To regenerate your blog from _scratch_, run the following command:

    rake regen


  h2. Removing generated files

  To remove only the files that were copied from <tt>input/</tt> to <tt>output/</tt>, run the following command:

    rake clean

  To remove all the generated files, run the following command:

    rake clobber


  h2. Publishing your blog

  To upload your blog to your website, run the following command:

    rake upload


  h2. Preview while you write

  To continuously preview a blog entry as you write it, run the command <pre>rake entry</pre> within an infinite loop in your shell, like this:

    while true; do rake entry; sleep 1; done

  Now, whenever you save your blog entry file, its HTML page will be generated for preview in your web browser.


  h2(#usage.import). Importing blog entries from RSS feed

  The *import* task allows you to import blog entries from an RSS feed, which must be provided on the standard input stream.

  For example, if you have an RSS feed file named <tt>feed.xml</tt> then you would import it into Rassmalog like this:

    rake import < feed.xml

  <%##########################################################################%>

  h1. Writing blog entries

  This chapter deals with things related to the writing, formatting, and scripting of blog entries.


  h2. Parameters

  The <tt>input/rassmalog/entry.yaml</tt> file says:

  <%= dump_param_info('input/rassmalog/entry.yaml', 3) %>


  h2. eRuby directives

  The text of a blog entry is treated as an eRuby template. Thus, you can use eRuby directives (which appear within @<%%@ and @%>@ tags) in the text of your blog entries.

  For example, putting the following text in a blog entry:

  <code lang="rhtml">
  <%% 3.times do %>

  * Hello World!
  <%% end %>
  </code>

  Produces the following result:

  <% 3.times do %>
  * Hello World!
  <% end %>


  h2. Relative URLs to output files

  Rassmalog adjusts all relative URLs in the final HTML output to be relative to the <tt>output/</tt> directory. This is done to give all blog entries (regardless of how deep they are inside the <tt>input/</tt> directory) a common way to access files. As a result, some extra work is necessary to access files that are relative to a blog entry itself.

  For example, suppose that (1) we have the following directory structure and that (2) the <tt>input/food/fruit/banana.yaml</tt> blog entry contains the <tt>../nuts/walnut.html</tt> relative URL.

  * input/
  ** food/
  *** fruit/
  **** banana.yaml
  *** nuts/
  **** walnut.yaml

  * output/
  ** food/
  *** fruit/
  **** banana.html
  *** nuts/
  **** walnut.html

  Rassmalog will change <tt>../nuts/walnut.html</tt> into <tt>../../../nuts/walnut.html</tt> by adding a <ins>../../</ins> prefix. As a result, the changed URL is now referring to a nonexistent <tt>nuts/walnut.html</tt> file that resides _one level above_ the <tt>output/</tt> directory!

  One solution is to manually rewrite to rewrite the original URL to be relative to the <tt>output/</tt> directory: <tt>../nuts/walnut.html</tt> becomes <tt>food/nuts/walnut.html</tt>.

  Another solution is to use an eRuby directive to add the blog entry source file's parent directory's path to the relative URL: <tt>../nuts/walnut.html</tt> becomes <pre><%%= File.dirname(@entry.output_url) %>/../nuts/walnut.html</pre>


  h2(#entry.toc). Table of contents generation

  A table of contents is _automatically generated_ from headings (@<h1>@ through @<h6>@ for HTML and @h1.@ through @h6.@ for Textile) found in the text of a blog entry.

  Headings are numbered in the style of LaTeX; these numbers contain a hyperlink back to the table of contents for easier navigation.

  If you want to disable the table of contents for a particular blog entry, then see the "*generate_toc* parameter":#param.generate_toc in the list of parameters above.

  If you want to disable the table of contents _globally_, for all blog entries, then see the *generate_toc* parameter in your <tt>config/blog.yaml</tt> configuration file.


  h2(#entry.code). Syntax coloring for source code

  Syntax coloring is _automatically added_ to source code found inside the *&lt;code&gt;* and *&lt;/code&gt;* HTML tags. Note that in Textile, any text enclosed within a pair of at-signs (&#64; and &#64;) is also considered to be source code.

  The following programming languages are currently supported by "CodeRay":http://coderay.rubychan.de, the default syntax coloring software used in Rassmalog:
  * Ruby
  * C
  * Delphi
  * HTML
  * RHTML (Rails)
  * Nitro-XHTML

  This feature can be disabled or changed by editing the <tt>config/format.rb</tt> file accordingly.


  h3. Specifying the programming language

  Because different programming languages have different syntax coloring schemes, you can specify the language of your source code using the @lang@ attribute to ensure that only the appropriate coloring scheme is used. Note that unless the @lang@ attribute is specified, _Ruby_ is assumed to be the programming language of all source code by default.

  <% sampleCode = %q{
  # Ruby ###########################
  def hello
    puts "Hello world!"
  end


  /* C ****************************/
  #include <stdio.h>
  int main(int argc, char **argv) {
    printf("Hello world!\n");
    return 0;
  }


  <!-- HTML ----------------------->
  <html>
    <body>
      Hello world!
    <body>
  </html>
  } %>

  For example, here is some source code _without_ the @lang@ attribute:

  <code><%= sampleCode %></code>

  And here is the same source code with a @lang="c"@ attribute:

  <code lang="c"><%= sampleCode %></code>

  And here is the same source code with a @lang="html"@ attribute:

  <code lang="html"><%= sampleCode %></code>


  h2. Smart sizing of source code

  Source code is _automatically sized_ to be displayed as either a line or paragraph of text, depending on whether it contains line breaks.

  For example, here is a single line of code:

  <code>life = true or false</code>

  And here is a paragraph of code:

  <code>life =
  true or false</code>

  This feature can be disabled or changed by editing the <tt>config/format.rb</tt> file accordingly.


  h2(#entry.verbatim). Protecting verbatim text

  Sometimes you just need to protect some text from being mangled by the text-to-HTML conversion process (which is governed by <tt>config/format.rb</tt>). In such cases, you can wrap the text you want to proctect within *&lt;noformat&gt;* and *&lt;/noformat&gt;* tags.

  Note that this is a feature of the default <tt>config/format.rb</tt> file provided with Rassmalog.  If you defined your own text-to-HTML conversion scheme, then this feature might not work.


  <%##########################################################################%>

  h1. Hacking

  You can obtain the latest source code from the "Darcs":http://darcs.net repository:

    darcs get http://rassmalog.rubyforge.org/src/rassmalog/
