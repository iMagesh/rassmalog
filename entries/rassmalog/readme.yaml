name: Welcome to Rassmalog

date: Wed Dec 13 01:28:17 PST 2006 @436 /Internet Time/

tags: documentation

text: |
  <% @langFiles = Dir['config/lang/*.yaml'] %>

  h1. Introduction

  Rassmalog is a static blog engine based on "YAML(Yet Another Markup Language)":http://www.yaml.org/, "eRuby":http://en.wikipedia.org/wiki/Eruby, and "Rake":http://rake.rubyforge.org/. It transforms blog entries written in "Textile":http://whytheluckystiff.net/ruby/redcloth/ or "other formatting systems":#config.format into web pages that are user friendly in both graphical and "text-only web browsers":http://en.wikipedia.org/wiki/Lynx_%28web_browser%29.

  Rassmalog features "tagging":http://en.wikipedia.org/wiki/Folksonomy and _fully automatic_ archiving, table of contents, and syntax coloring for blog entries, an "RSS(Really Simple Syndication) 2.0":http://en.wikipedia.org/wiki/RSS feed for your entire blog, localization in "<%= @langFiles.length %> languages":#manifest.lang, and a tiny code base containing _less than_ 600 lines of code.

  Rassmalog is "open source software":#License inspired by the "Rog":http://rog.rubyforge.org and "hobix":http://hobix.com blog engines. Its name is derived from the word "Rasmalai":http://en.wikipedia.org/wiki/Rasmalai and is a pseudo portmanteau of the words "RSS(Really Simple Syndication)", "YAML(Yet Another Markup Language)", and "blog".


  h1. Motivation

  Although "dynamic blog engines":http://en.wikipedia.org/wiki/Dynamic_web_page are popular nowadays, I feel that "static blog engines":http://en.wikipedia.org/wiki/Static_Web_page like Rassmalog are still relevant today. The following sections explain why.


  h2. Server requirements

  |_. Dynamic blog engine|Requires support for CGI(Common Gateway Interface) or a server-side scripting language, and typically require access to a relational database system.|
  |_. Rassmalog|Requires _nothing extra_ because _all_ web servers are, by definition, capable of serving files over HTTP(Hypertext Transfer Protocol).|


  h2. Content portability

  |_/2. Dynamic blog engine|Typically keeps your content scattered across multiple tables in a relational database.|
  |If you decide to use another blog engine, you must first understand your blog's database schema before you can extract your content from its relational database. Afterwards, you still need to convert the extracted content and import it into the new blog.|
  |_/2. Rassmalog|Keeps your content in _plain text files_.|
  |If you decide to use another blog engine, your content is _easily converted_ using "standard text processing tools":http://tldp.org/LDP/abs/html/textproc.html or languages such as "Perl":http://perl.org and "Ruby":http://ruby-lang.org.|


  h2. Content ownership

  |_/2. Dynamic blog engine|Your content is typically _locked away_ within a relational database, to which you might not have access. Thus, it is commonly _difficult to backup_ your content.|
  |You are _vulnerable to data loss_ when your web hosting service accidentally crashes or erases your blog.|
  |_/2. Rassmalog|Your content is _stored on your computer_. Thus, you can easily _make backups_ and share them with a good friend.|
  |You are _safe from data loss_ when your web hosting service accidentally crashes or erases your blog.|


  h2. Spam control

  |_. Dynamic blog engine|You are vulnerable to "comment spam":http://en.wikipedia.org/wiki/Spam_in_blogs, which you will have to clean up eventually using a clunky web-based comment management interface.|
  |_. Rassmalog|You don't have to shuffle through towering piles of comment spam because Rassmalog provides _e-mail based comments_ (which can be disabled if you want) instead. Furthermore, Rassmalog takes special care to avoid "e-mail spam":http://en.wikipedia.org/wiki/E-mail_spam by obfuscating your e-mail address in such a way that "address harvesters":http://en.wikipedia.org/wiki/E-mail_address_harvesting won't bother trying to figure it out.|


  h1. Features

  Rassmalog is designed for _ease of use_ and configuration. These goals are achieved through simplicity: Rassmalog's code base is tiny--containing _less than 500 lines_ of code! As a result,


  h2. Table of contents

  A table of contents is _automatically generated_ from HTML headings (@<h1>@, @<h2>@, ... @<h6>@) found in the text of a blog entry. Note that in Textile, headings are expressed as @h1.@, @h2.@, ... @h6.@ instead.

  Furthermore, headings are numbered in the style of LaTeX.  These heading numbers contain a hyperlink back to the table of contents for easier navigation.

  * An example of this feature is shown near the beginning of this article.

  * This feature can be disabled or altered by editing the <tt>config/entry.erb</tt> template accordingly.


  h2. Syntax coloring

  Syntax coloring is _automatically added_ to source code.

  * This feature can be disabled or altered by editing the <tt>config/format.rb</tt> file accordingly.


  h3. Specifying the programming language

  Because different programming languages have different syntax coloring schemes, you can specify the language of your source code using the @lang@ attribute to ensure that only the appropriate coloring scheme is used. Note that unless the @lang@ attribute is specified, _Ruby_ is assumed to be the programming language of all source code by default.

  * List of "supported programming languages":http://coderay.rubychan.de/.

  <% sampleCode = %q{
  # Ruby ###########################
  def hello
    puts "Hello world!"
  end


  /* C ****************************/
  #include <stdio.h>
  int main(int argc, char **argv) {
    printf("Hello world!\n");
    return 0;
  }


  <!-- HTML ----------------------->
  <html>
    <body>
      Hello world!
    <body>
  </html>
  } %>

  For example, here is some source code _without_ the @lang@ attribute:

  <code><%= sampleCode %></code>

  And here is the same source code with a @lang="c"@ attribute:

  <code lang="c"><%= sampleCode %></code>

  And here is the same source code with a @lang="html"@ attribute:

  <code lang="html"><%= sampleCode %></code>


  h2. Smart sizing

  Source code is _automatically sized_ to be displayed as either a line or paragraph of text, depending on whether it contains line breaks.

  For example, here is a single line of code:

  <code>life = true or false</code>

  And here is a paragraph of code:

  <code>life =
  true or false</code>

  * This feature can be disabled or altered by editing the <tt>config/format.rb</tt> file accordingly.


  h2. Localization

  The core of Rassmalog is easily localized (L10N(Localization) / I18N(Internationalization) / M17N(Multilingualization)) through simple "translation files":#config.lang, which consist of key-value pairs. For instance, the translation file for Spanish appears like this:

  <pre><%= File.read 'config/lang/es.yaml' %></pre>

  Here, English phrases are written on the left and their corresponding Spanish phrases are written on the right.

  * At present, there are "<%= @langFiles.length %> translation files":#manifest.lang available.


  h2. Import from RSS feed

  If you are coming from another blog engine, Rassmalog lets you "import your existing blog entries from an RSS feed":#usage.import.


  h2. Blog entry format

  Blog entries are _plain text files_ with easy syntax. For example, see this "blog entry":http://rassmalog.rubyforge.org/src/rassmalog/entries/rassmalog/example.yaml and its corresponding "HTML output":2006-12-08-put-the-name-of-your-entry-here..html.

  * Only _four parameters_ in a blog entry:
  ** name
    - title of the blog entry
  ** date
    - date and time when the blog entry was written
  ** tags
    - categories in which the blog entry belongs
  ** text
    - content of the blog entry

  * You can _define your own parameters_ in a blog entry and use them in the templates _without_ additional programming, thanks to Ruby's @OpenStruct@ class.

  * No obscure rules for naming blog entry files. The file name can be whatever you want!

  * No obscure restrictions on how blog entry files are organized -- just keep them somewhere beneath the <tt>entries/</tt> directory!


  h3. eRuby directives

  The text of a blog entry is treated as an eRuby template. Thus, you can use
  eRuby directives (which appear within @<%%@ and @%>@ tags) in the text of
  your blog entries.

  For example, putting the following text in a blog entry:

  <code lang="rhtml">
  <%% 3.times do %>

  * Hello World!
  <%% end %>
  </code>

  Produces the following result:

  <% 3.times do %>
  * Hello World!
  <% end %>


  h2. Easy configuration

  * If you don't like Textile, you can easily "use _any_ text formatting system":#config.format you want for blog entries.

  * Templates are easily changable to suit your tastes:
  ** Only five templates involved in generating HTML output.
  ** Only one template involved in generating an RSS feed.


  h1. Organization

  The basic unit of content in Rassmalog is the blog *entry*. Entries are collected into *pages*. Pages are collected into *chapters*.

  As you can see, there is a hierarchical relationship here:

  * Chapter
  ** Page
  *** Entry

  For example,
  * a chapter shows all available tags
  * a page shows all entries for a particular tag
  * an entry just shows its content


  h2(#manifest). Contents of a release package

  When you extract the release package, you would see the following:

  * <tt>rassmalog.rb</tt>
    - the core of Rassmalog

  * <tt>config/</tt>
    - directory that contains all configuration files

  * <tt>config/blog.yaml</tt>
    - the primary configuration file for your blog

  * <tt>config/rss.erb</tt>
    - template used to generate the RSS 2.0 feed

  * <tt>config/html.erb</tt>
    - template used to generate all HTML files

  * <tt>config/index.erb</tt>
    - template used to generate all <tt>index*.html</tt> files

  * <tt>config/entry.erb</tt>
    - template used to generate HTML for an entry

  * <tt>config/page.erb</tt>
    - template used to generate HTML for a page

  * <tt>config/chapter.erb</tt>
    - template used to generate HTML for a chapter

  * <tt>config/format.rb</tt>
    - defines how text is transformed into HTML

  * <tt>config/lang/</tt>
    - directory that contains translations of English text used in the core of Rassmalog. These translations do not include English text used in the templates (<tt>config/*.erb</tt>) because those are already separate from the core of Rassmalog.

    <a id="manifest.lang"/>

    Learn "how to use the translation files":#config.lang shown below.
  <% # list all the translation files
    @langFiles.each do |file|
      lang = File.readlines(file).first.sub(/^#/, '')
  %>
  ** <tt><%= file %></tt> - <%= lang %> translation file.
  <% end %>

  * <tt>entries/</tt>
    - directory that contains all blog entry files.

    The file name of a blog entry file can be _anything_ as long it ends with a <tt>.yaml</tt> extension. All other files beneath the <tt>entries/</tt> directory are ignored.

    You can organize your blog entry files within subdirectories. For example, I like to put all blog entry files related to Ruby programming within the <tt>entries/code/ruby/</tt> subdirectory. The names of these subdirectories do not have any special meaning to Rassmalog, so you can name them however you like.

  * <tt>entries/example.yaml</tt>
    - an example blog entry file.

  * <tt>input/</tt>
    - directory that contains resources, such as images and stylesheets, that are used by your blog. Everything inside this directory is automatically copied into the <tt>output/</tt> directory when your blog is generated.

  * <tt>input/styles/default.css</tt>
    - the default CSS stylesheet provided with Rassmalog.

  * <tt>output/</tt>
    - directory that contains all generated files.


  h2. Version numbering system

  Rassmalog uses the "RubyGems rational versioning policy":http://www.rubygems.org/read/chapter/7 to number its releases. This "major.minor.build" numbering policy "is summarized":http://ablog.apress.com/?p=738 as follows.

  * When the *major* number increases, functionally _incompatible changes_ have occurred. Thus, what may have worked in the previous version may not work in the new one.

  * When the *minor* number increases, functionally _compatible changes_ have occurred. Thus, what worked in the previous version will work in the new one.

  * When the *build* number increases, the _underlying implementation_ has changed. The functionality has not changed and no features have been added. Thus, what worked in the previous version will work in the new one.


  h2. License

  <%= File.read 'LICENSE' %>


  h1. Installation

  Simply extract the release package anywhere you want.


  h2. Requirements

  To use Rassmalog, you need the following software (however, you can "bypass some of them":#Bypassing_some_requirements):

  * "Rake":http://docs.rubyrake.org/
  * "RedCloth":http://whytheluckystiff.net/ruby/redcloth/
  * "CodeRay":http://coderay.rubychan.de/

  If you have "RubyGems":http://rubygems.org/ on your system, then you can install the above requirements by running the following command:

    gem install rake redcloth coderay


  h3. Bypassing some requirements

  If you do not wish to install RedCloth and CodeRay, please see the section named "using another formatting system":#config.format below.


  h1(#config). Configuration

  Start by editing the <tt>config/blog.yaml</tt> file. It has plentiful comments and documentation to help guide you through you the configuration process. Next, proceed to editing "the other files":#manifest in the <tt>config/</tt> directory to suit your taste.

  You are encouraged to generate your blog at each step of the configuration process to see how your choices affect the generated output. This gives you a good sense of how Rassmalog works and how your blog can be shaped to suit your specific needs.


  h2(#config.lang). Enabling translation files

  The <tt>config/lang/</tt> directory contains translation files for English text used in the core of Rassmalog. To enable one of these files, set the value of the @language@ parameter in the <tt>config/blog.yaml</tt> file to the name of the translation file.

  For example, if you wish to enable the <tt>config/lang/foobar.yaml</tt> translation file, then you would set the @language@ parameter as follows:

      language: foobar

  In this manner, you can add or edit translation files for your own languages and use them in your blog. However, please consider "contributing your translation files":http://rubyforge.org/tracker/?group_id=2737 so that other users can also enjoy your translations! :-)


  h2(#config.format). Using another text formatting system

  To use another text formatting system, simply replace the @String.to_html@ method, which is defined in the <tt>config/format.rb</tt> file, to make use of your desired text formatting scheme.

  For example, if you replace the entire <tt>config/format.rb</tt> file with the following code, then all entries will appear within yellow-colored &lt;pre&gt; elements in the generated HTML files.

  <code>
  class String
    def to_html
      '<pre style="background: yellow">' + self + '</pre>'
    end
  end
  </code>

  In this manner, you can make Rassmalog use any formatting system you wish.


  h2. Disabling parts of a blog

  Suppose you wanted to disable the generation of the RSS feed for your blog. In order to do this,

  # Open the <tt>rassmalog.rb</tt> file for editing using a text editor.
  # Scroll down to the "output generation stage" section.
  # You should now see a line of code similar to this:
    <br/>
    @task :default => [:copy, :entry, :page, :chapter, :index, :feed]@
  # Remove the @:feed@ element from the line of code.

  In this manner, you can disable other parts of the blog generation process. Furthermore, you can edit the source code in the "output generation stage" section to suit your needs.


  h1. Usage

  In the location where you installed Rassmalog, run the following command to see a list of available tasks:

    rake -T

  For example, here is the output you would see when you run the above command:

    <pre><%= `rake -T` %></pre>


  h2. Generating your blog

  To generate your blog, run the following command:

    rake

  To regenerate your blog from _scratch_, run the following command:

    rake regen


  h2. Removing generated files

  To remove only the files that were copied from <tt>input/</tt> to <tt>output/</tt>, run the following command:

    rake clean

  To remove all the generated files, run the following command:

    rake clobber


  h2. Publishing your blog

  To upload your blog to your website, run the following command:

    rake upload


  h2. Preview while you write

  To continuously preview a blog entry as you write it, run the command <pre>rake entry</pre> within an infinite loop in your shell, like this:

    while true; do rake entry; sleep 1; done

  Now, whenever you save your blog entry file, its HTML page will be generated for preview in your web browser.


  h2(#usage.import). Importing blog entries from RSS feed

  The *import* task allows you to import blog entries from an RSS feed, which must be provided on the standard input stream.

  For example, if you have an RSS feed file named <tt>feed.xml</tt> then you would import it into Rassmalog like this:

    rake import < feed.xml


  h2. Linking to other blog entries

  You can create a link from one blog entry to another by simply putting the name of the target blog entry's web page file as the link address.

  For example, suppose that you had a blog entry whose generated web page file was <tt>output/2006-12-13-welcome-to-rassmalog.html</tt>. To make a link to the blog entry, you would write:

  * In HTML:
    <pre><a href="2006-12-13-welcome-to-rassmalog.html">link</a></pre>

  * In Textile:
    <pre>"link":2006-12-13-welcome-to-rassmalog.html</pre>

  Notice that <tt>output/</tt> is omitted from the link address.


  h2. Linking to images and other files

  Recall that the *copy* task copies everything from the <tt>input/</tt> directory into the <tt>output/</tt> directory. As a result, you can create a link to an image or some other file by simply putting the path of that file (relative to the <tt>output/</tt> directory) as the link address.

  For example, to create a link to the <tt>input/images/foobar.jpg</tt> image, you would write:

  * In HTML:
    <pre><img src="images/foobar.jpg"/></pre>

  * In Textile:
    <pre>!images/foobar.jpg!</pre>

  Notice that the link address does _not_ begin with either <tt>input/</tt> or <tt>output/</tt>.


  h1. Hacking

  You can obtain the latest source code from the "Darcs":http://darcs.net repository:

    darcs get http://rassmalog.rubyforge.org/src/rassmalog/
