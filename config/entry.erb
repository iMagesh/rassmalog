<%
=begin
  This is a template for generating HTML for a blog entry.

  The following variables are available for use in this template:
  * BLOG        - data from the blog configuration file
  * LANG        - data from the translation file
  * ENTRIES     - array of all blog entries (Entry objects)
  * NEW_ENTRIES - array of recent blog entries (Entry objects)
  * TAGS        - array of all tags (Section objects)
  * ARCHIVES    - array of all archives (Section objects)
  * FEEDS       - array of all feeds (Feed objects)
  * @entry      - the Entry object for which we are generating HTML
  * @summarize  - should this entry be summarized?
  * @solo       - is this entry being rendered alone, on its own page?

  NOTE that the "display: none" stuff in this template is meant to improve
  the readability and usability of this web page in text-only web browsers.
=end

  # prevent Ruby warning about uninitialized @solo variable
  @solo = false unless defined? @solo

  content = @entry.html

  if @summarize and summary = @entry.summary
    # fragment links should take you inside the full (non-summarized) entry
    content = summary.gsub %r{(href=.)(#)} do
      $1 + @entry.url + $2
    end

  else
    # check whether we want to generate the table of contents
    generateTOC =
      if @entry.key? 'generate_toc'
        @entry['generate_toc']
      else
        BLOG.generate_toc
      end

    if generateTOC
      toc, content = content.table_of_contents
    end
  end

  anchor = @entry.url.to_uri_fragment
%>
<br style="display: none"/>

<div id="<%= anchor %>" class="entry<%= ' entry-solo' if @solo %>">
  <h1 class="name"><%= @entry.to_link %></h1>

  <%
    if @solo and not @entry.hide?
      nextWord = LANG['Newer']
      prevWord = LANG['Older']

      # these are inverse because ENTRIES is
      # sorted in *reverse* chronological order
      nextItem = @entry.prev
      prevItem = @entry.next

      prevLink = prevItem.to_link(prevWord) if prevItem
      nextLink = nextItem.to_link(nextWord) if nextItem
      rootLink = @entry.parent.to_link(nil, anchor)
  %>
  <p class="menu"><%=
    [prevLink, rootLink, nextLink].compact.join(' &middot; ')
  %></p>
  <% end %>

  <% if toc %>
    <br style="display: none"/>
    <div class="toc">Contents <%= toc %></div>
  <% end %>

  <div class="text"><%= content %></div>

  <% if summary %>
    <p class="more"><%= @entry.to_link LANG["Read more..."] %></p>
  <% end %>

  <p class="info">
    <%=
      stamp = @entry.date.strftime("%c")

      archiveLink =
        if @entry.hide?
          stamp
        else
          @entry.archive.to_link(stamp)
        end

      LANG["Written on %s.", archiveLink]
    %>

    <% unless @entry.tags.empty? %>
      <br/>
      <%=
        tagList = @entry.tags.map {|t| t.to_link }.join(', ')
        LANG["Tagged as %s.", tagList]
      %>
    <% end %>

    <% unless @summarize %>
      <% if BLOG.email %>
        <br/>
        <%=
          LANG['You may {send comments by e-mail}.'].
          sub(/\{(.*?)\}/) { link @entry.comment_url, $1 }
        %>
      <% end %>
      <%#
        If you wish to use a JavaScript-based commenting system such as
        disqus, instense debate, js-kit, and so on, then simply replace
        this eRuby comment with the appropriate JavaScript code.
      %>
    <% end %>
  </p>
</div>

<hr style="display: none"/>
